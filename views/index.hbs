
<html>
  <head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>mwgraphviz</title>

    <script src=" https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js"></script>

    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

    <script type="text/javascript" src="http://canvg.github.io/canvg/rgbcolor.js"></script> 
    <script type="text/javascript" src="http://canvg.github.io/canvg/StackBlur.js"></script>
    <script type="text/javascript" src="http://canvg.github.io/canvg/canvg.js"></script> 

    	<script src="https://cdn.jsdelivr.net/jquery.loadingoverlay/latest/loadingoverlay.min.js"></script>
	<script src="https://cdn.jsdelivr.net/jquery.loadingoverlay/latest/loadingoverlay_progress.min.js"></script>

  </head>
<body>


<nav class="navbar navbar-inverse" style="margin-top:-40px">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="/" style="color:white"> mwgraphviz : Draw graphviz in browser</a>
    </div>
<!---    <ul class="nav navbar-nav">
      <li class="active"><a href="#">Home</a></li>
      <li><a href="#">Page 1</a></li>
      <li><a href="#">Page 2</a></li>
      <li><a href="#">Page 3</a></li>
--->
    </ul>
  </div>
</nav>



    <button type="button" class="btn btn-primary" id="sample_1_btn" >Sample 1: A completed one</button>
    <button type="button" class="btn btn-primary" id="sample_2_btn" >Sample 2: Design of this service</button>

<br>
<br>
<textarea class="form-control" id="graphviz_text" rows="20" cols="30" width="100%" wrap="off" placeholder="enter dot text here">
</textarea>
<p>
<br>

<button type="button" class="btn btn-primary" id="post_button" onclick="$.LoadingOverlay('show');"><b>Draw SVG Graph</b></button>
    <button type="button" class="btn btn-primary" id="download_button"><b>Open PNG in another Tab</b></button>
    <button type="button" class="btn btn-primary" id="upload_button" onclick="$.LoadingOverlay('show');"><b>Get an URL of the graph</b></button>

    <br>

    <div id="errorblock"></div> 
    <span id="urlblock"  style="background-color: #FFFF00"></span> 
    <br>

    <div style="display:inline-block" id="mysvg">
      </div>

    <canvas id="canvas" style="visibility:hidden"></canvas>



<script id="sample2" style="visibility:hidden">

 digraph G{
	nodesep=.5;
	margin=0.01;
        size=10
rankdir=LR
        frontend[shape=box,label="front end"]
        mwinside[shape=box,label="mw inside"]
        apigateway[shape=box,label="api gateway"]
        lambda1[shape=box,label="lambda: graphviz "]
        lambda2[shape=box,label="lambda: svg to png"]
       S3[shape=box,label="S3"]

      frontend->mwinside[label="draw \nsvg"]
      frontend->mwinside[label="get \n url "]
      mwinside->apigateway	
      apigateway->lambda1[label="dot"]
      lambda1->frontend[label="svg"]
      apigateway->lambda2[label="svg"]
      lambda2->S3[label="png"]
      S3->lambda2[label="url"]
      lambda2->frontend[label="url"]
} 
</script>
    
<script id="sample1" style="visibility:hidden">
  digraph prof {
	ratio = fill;
	node [style=filled];
	start -> main [color="0.002 0.999 0.999"];
	start -> on_exit [color="0.649 0.701 0.701"];
	main -> sort [color="0.348 0.839 0.839"];
	main -> merge [color="0.515 0.762 0.762"];
	main -> term [color="0.647 0.702 0.702"];
	main -> signal [color="0.650 0.700 0.700"];
	main -> sbrk [color="0.650 0.700 0.700"];
	main -> unlink [color="0.650 0.700 0.700"];
	main -> newfile [color="0.650 0.700 0.700"];
	main -> fclose [color="0.650 0.700 0.700"];
	main -> close [color="0.650 0.700 0.700"];
	main -> brk [color="0.650 0.700 0.700"];
	main -> setbuf [color="0.650 0.700 0.700"];
	main -> copyproto [color="0.650 0.700 0.700"];
	main -> initree [color="0.650 0.700 0.700"];
	main -> safeoutfil [color="0.650 0.700 0.700"];
	main -> getpid [color="0.650 0.700 0.700"];
	main -> sprintf [color="0.650 0.700 0.700"];
	main -> creat [color="0.650 0.700 0.700"];
	main -> rem [color="0.650 0.700 0.700"];
	main -> oldfile [color="0.650 0.700 0.700"];
	sort -> msort [color="0.619 0.714 0.714"];
	sort -> filbuf [color="0.650 0.700 0.700"];
	sort -> newfile [color="0.650 0.700 0.700"];
	sort -> fclose [color="0.650 0.700 0.700"];
	sort -> setbuf [color="0.650 0.700 0.700"];
	sort -> setfil [color="0.650 0.700 0.700"];
	msort -> qsort [color="0.650 0.700 0.700"];
	msort -> insert [color="0.650 0.700 0.700"];
	msort -> wline [color="0.650 0.700 0.700"];
	msort -> div [color="0.650 0.700 0.700"];
	msort -> cmpsave [color="0.650 0.700 0.700"];
	merge -> insert [color="0.650 0.700 0.700"];
	merge -> rline [color="0.650 0.700 0.700"];
	merge -> wline [color="0.650 0.700 0.700"];
	merge -> unlink [color="0.650 0.700 0.700"];
	merge -> fopen [color="0.650 0.700 0.700"];
	merge -> fclose [color="0.650 0.700 0.700"];
	merge -> setfil [color="0.650 0.700 0.700"];
	merge -> mul [color="0.650 0.700 0.700"];
	merge -> setbuf [color="0.650 0.700 0.700"];
	merge -> cmpsave [color="0.650 0.700 0.700"];
	insert -> cmpa [color="0.650 0.700 0.700"];
	wline -> flsbuf [color="0.649 0.700 0.700"];
	qsort -> cmpa [color="0.650 0.700 0.700"];
	rline -> filbuf [color="0.649 0.700 0.700"];
	xflsbuf -> write [color="0.650 0.700 0.700"];
	flsbuf -> xflsbuf [color="0.649 0.700 0.700"];
	filbuf -> read [color="0.650 0.700 0.700"];
	term -> unlink [color="0.650 0.700 0.700"];
	term -> signal [color="0.650 0.700 0.700"];
	term -> setfil [color="0.650 0.700 0.700"];
	term -> exit [color="0.650 0.700 0.700"];
	endopen -> open [color="0.650 0.700 0.700"];
	fopen -> endopen [color="0.639 0.705 0.705"];
	fopen -> findiop [color="0.650 0.700 0.700"];
	newfile -> fopen [color="0.634 0.707 0.707"];
	newfile -> setfil [color="0.650 0.700 0.700"];
	fclose -> fflush [color="0.642 0.704 0.704"];
	fclose -> close [color="0.650 0.700 0.700"];
	fflush -> xflsbuf [color="0.635 0.707 0.707"];
	malloc -> morecore [color="0.325 0.850 0.850"];
	malloc -> demote [color="0.650 0.700 0.700"];
	morecore -> sbrk [color="0.650 0.700 0.700"];
	morecore -> getfreehdr [color="0.650 0.700 0.700"];
	morecore -> free [color="0.650 0.700 0.700"];
	morecore -> getpagesize [color="0.650 0.700 0.700"];
	morecore -> putfreehdr [color="0.650 0.700 0.700"];
	morecore -> udiv [color="0.650 0.700 0.700"];
	morecore -> umul [color="0.650 0.700 0.700"];
	on_exit -> malloc [color="0.325 0.850 0.850"];
	signal -> sigvec [color="0.650 0.700 0.700"];
	moncontrol -> profil [color="0.650 0.700 0.700"];
	getfreehdr -> sbrk [color="0.650 0.700 0.700"];
	free -> insert [color="0.650 0.700 0.700"];
	insert -> getfreehdr [color="0.650 0.700 0.700"];
	setfil -> div [color="0.650 0.700 0.700"];
	setfil -> rem [color="0.650 0.700 0.700"];
	sigvec -> sigblock [color="0.650 0.700 0.700"];
	sigvec -> sigsetmask [color="0.650 0.700 0.700"];
	doprnt -> urem [color="0.650 0.700 0.700"];
	doprnt -> udiv [color="0.650 0.700 0.700"];
	doprnt -> strlen [color="0.650 0.700 0.700"];
	doprnt -> localeconv [color="0.650 0.700 0.700"];
	sprintf -> doprnt [color="0.650 0.700 0.700"];
cmpa [color="0.000 1.000 1.000"];
wline [color="0.201 0.753 1.000"];
insert [color="0.305 0.625 1.000"];
rline [color="0.355 0.563 1.000"];
sort [color="0.408 0.498 1.000"];
qsort [color="0.449 0.447 1.000"];
write [color="0.499 0.386 1.000"];
read [color="0.578 0.289 1.000"];
msort [color="0.590 0.273 1.000"];
merge [color="0.603 0.258 1.000"];
unlink [color="0.628 0.227 1.000"];
filbuf [color="0.641 0.212 1.000"];
open [color="0.641 0.212 1.000"];
sbrk [color="0.647 0.204 1.000"];
signal [color="0.647 0.204 1.000"];
moncontrol [color="0.647 0.204 1.000"];
xflsbuf [color="0.650 0.200 1.000"];
flsbuf [color="0.650 0.200 1.000"];
div [color="0.650 0.200 1.000"];
cmpsave [color="0.650 0.200 1.000"];
rem [color="0.650 0.200 1.000"];
setfil [color="0.650 0.200 1.000"];
close [color="0.650 0.200 1.000"];
fclose [color="0.650 0.200 1.000"];
fflush [color="0.650 0.200 1.000"];
setbuf [color="0.650 0.200 1.000"];
endopen [color="0.650 0.200 1.000"];
findiop [color="0.650 0.200 1.000"];
fopen [color="0.650 0.200 1.000"];
mul [color="0.650 0.200 1.000"];
newfile [color="0.650 0.200 1.000"];
sigblock [color="0.650 0.200 1.000"];
sigsetmask [color="0.650 0.200 1.000"];
sigvec [color="0.650 0.200 1.000"];
udiv [color="0.650 0.200 1.000"];
urem [color="0.650 0.200 1.000"];
brk [color="0.650 0.200 1.000"];
getfreehdr [color="0.650 0.200 1.000"];
strlen [color="0.650 0.200 1.000"];
umul [color="0.650 0.200 1.000"];
doprnt [color="0.650 0.200 1.000"];
copyproto [color="0.650 0.200 1.000"];
creat [color="0.650 0.200 1.000"];
demote [color="0.650 0.200 1.000"];
exit [color="0.650 0.200 1.000"];
free [color="0.650 0.200 1.000"];
getpagesize [color="0.650 0.200 1.000"];
getpid [color="0.650 0.200 1.000"];
initree [color="0.650 0.200 1.000"];
insert [color="0.650 0.200 1.000"];
localeconv [color="0.650 0.200 1.000"];
main [color="0.650 0.200 1.000"];
malloc [color="0.650 0.200 1.000"];
morecore [color="0.650 0.200 1.000"];
oldfile [color="0.650 0.200 1.000"];
on_exit [color="0.650 0.200 1.000"];
profil [color="0.650 0.200 1.000"];
putfreehdr [color="0.650 0.200 1.000"];
safeoutfil [color="0.650 0.200 1.000"];
sprintf [color="0.650 0.200 1.000"];
term [color="0.650 0.200 1.000"];
}
</script>


</body>



<script type="text/javascript">

 
  $(document).ready(function() {
      document.getElementById("download_button").disabled = true;
      document.getElementById("upload_button").disabled = true;
      
  // post button
  $('#post_button').on('click', function (e) {
      //clean previous 
      var theError = document.getElementById("errorblock");
      theError.innerHTML='';      


      //clean the url
      document.getElementById("urlblock").innerHTML='';

      console.log('button clicked');
      var inputText = document.getElementById("graphviz_text").value;     
      //console.log(inputText);
      
      $.post('/postdata',
             {data: inputText},
             function(res){
                  $.LoadingOverlay("hide");
                  //console.log(res);
		 //could parse the res here to determine whether if  need to draw or not. 
		 try{
                     allResult = JSON.parse(res);
                     result = allResult.svg;

		     
		     console.log(allResult.name);
		     if( result.errorMessage || result.type ){
			 console.log('error!');
			 var theError = document.getElementById("errorblock");
			 theError.innerHTML="Wait  and Try again later! : "+res;
		     }
		     if(result.type){
			 var theError = document.getElementById("errorblock");
			 theError.innerHTML='syntax error';
		     }
               }catch(err){
                     console.log("===============");
               }
		 
                 //var theSVG = document.getElementById("mysvg");
                 //theSVG.innerHTML=res;
		 
                         try{
                             canvg('canvas', result);
			     var theSVG = document.getElementById("mysvg");
			     theSVG.innerHTML=result;
                             document.getElementById("download_button").disabled = false;
  			     document.getElementById("upload_button").disabled = false;

                         }catch(err){
                             console.log('error!');
                             var theError = document.getElementById("errorblock");
                             theError.innerHTML='syntax error';
                         }

             });    
  });

 // download button
 $('#download_button').on('click', function (e) {
  console.log('download button clicked');
  var canvas = document.getElementById("canvas");
  var img = canvas.toDataURL("image/png");
  window.open(img); 
 });

  
//payload too large if pass png. so   pass svg
// upload button
  $('#upload_button').on('click', function (e) {
        //clean the url
      document.getElementById("urlblock").innerHTML='';

  console.log('upload button clicked');
     var node = document.getElementById("mysvg");
     var svgtext = node.innerHTML;
      $.post('/uploaddata',
            {data: svgtext},
	     function(res){
		 	     $.LoadingOverlay("hide");

                console.log("====  responose png name ===");
      console.log(res);
      //feed url to a text box
      urlroot="https://s3.amazonaws.com/mwgraphviz-upload/";
      document.getElementById("urlblock").innerHTML=urlroot+res;
	    });
 });


  
  //sample button 1
  $('#sample_1_btn').on('click', function (e){
      var inputArea = document.getElementById("graphviz_text");
      var sample1 = document.getElementById("sample1");
      inputArea.value= sample1.innerText;
  });
  //sample button 1
  $('#sample_2_btn').on('click', function (e){
      var inputArea = document.getElementById("graphviz_text");
      var sample2 = document.getElementById("sample2");
      inputArea.value= sample2.innerText;
  });
  

  });
</script>

